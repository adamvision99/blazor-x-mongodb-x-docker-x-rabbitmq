@page "/"
@inject RecipientService _recipientService
@inject IJSRuntime JsRuntime;


<h2>Send some recommended reading</h2>

@if (showInput) {
   
    <EditForm Model="@newRecipient" OnValidSubmit="@AddNew">

<div class="input-group mb-3 w-50">
    <input id="new-recipient" type="text" class="form-control" 
    bind-value-oninput=@newRecipient.Email placeholder="Recipient's Email" aria-label="Recipient's Email" aria-describedby="basic-addon2"/> 
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="submit">Add</button>
        <button class="btn btn-outline-secondary" type="button" onclick="@ToggleAddNew">Cancel</button>
    </div>   
    
</div>
<ValidationMessage For="@(() => newRecipient.Email)" />
<DataAnnotationsValidator />
    
</EditForm>
} 
else 
{
    <button class="btn btn-success mt-1" id="btn-add-new" onclick="@ToggleAddNew"><i class="oi oi-plus"></i> Add Recipient</button>
} 
@if (recipients.Any()){
<ul class="list-group w-50 mt-3">

    @foreach (var recipient in recipients) {
    <li class="list-group-item">@recipient.Email</li>
    }
</ul>
<button class="btn btn-danger mt-1" onclick="@Clear"><i class="oi oi-trash"></i> Clear</button>
}

@functions {
    private Recipient newRecipient = new Recipient();

    Recipient[] recipients;
    
    bool showInput = false;




    private async Task RefreshList(){
        recipients = await _recipientService.GetRecipientsAsync();
    }

    protected override void OnAfterRender()
    {
        if (showInput){
             Focus("new-recipient");     
        }
        else {
            Focus("btn-add-new"); 
        };
    }

    protected override async Task OnInitAsync()
    {
        await RefreshList();
    }

    private void ToggleAddNew(UIMouseEventArgs e)
    {
       showInput = !showInput;
    }

    private async Task AddNew(){    
         _recipientService.AddRecipient(newRecipient.Email);       
        await RefreshList();
        ToggleAddNew(null);    
        newRecipient = new Recipient();
    }
     private async Task Clear(){    
         _recipientService.Clear();       
        await RefreshList();
 
    }

   void Focus(string controlId)
    {
        var obj = JsRuntime.InvokeAsync<string>("MySetFocus", controlId);
    }
}